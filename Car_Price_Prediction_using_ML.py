# -*- coding: utf-8 -*-
"""Car Price Prediction using ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-1KYt53-l6a7DB_JK5jVT4NZfvzYoWd
"""

# Import necessary libraries for data handling, visualization, and modeling
import pandas as pd                                   # Data manipulation
import matplotlib.pyplot as plt                       # Plotting
import seaborn as sns                                 # Advanced data visualization
from sklearn.model_selection import train_test_split  # Splitting data
from sklearn.linear_model import LinearRegression     # Linear regression model
from sklearn.linear_model import Lasso                # Lasso regression model
from sklearn import metrics                           # Performance evaluation

# Load and preview the car dataset
car_dataset = pd.read_csv('/content/car data.csv')
car_dataset.head()

# Get the dimensions of the dataset (rows, columns)
car_dataset.shape

# Display summary information about the dataset
car_dataset.info()

# Check for missing values in each column of the dataset
car_dataset.isnull().sum()

# Count and display the occurrences of unique values for Fuel Type, Seller Type, and Transmission in the dataset
print(car_dataset.Fuel_Type.value_counts(),"\n")
print(car_dataset.Seller_Type.value_counts(), "\n")
print(car_dataset.Transmission.value_counts())

# Replace categorical values with numerical codes for Fuel Type, Seller Type, and Transmission in the dataset
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

# Split the dataset into features (X) by dropping 'Car_Name' and 'Selling_Price', and target variable (y) as 'Selling_Price'
X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
y = car_dataset['Selling_Price']

print(X)

print(y)

# Split the dataset into training and testing sets with 10% of the data used for testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state=2)

# Print the sizes of the training and test datasets
print("Train Data Size: ", len(X_train))  # Size of the training data
print("Test Data Size: ", len(X_test))    # Size of the test data

"""####Linear Regression"""

# Create a linear regression model and fit it to the training data
lin_reg_model = LinearRegression()
lin_reg_model.fit(X_train, y_train)

# Make predictions on the training data using the fitted linear regression model
training_data_prediction = lin_reg_model.predict(X_train)

# Calculate the R-squared score to evaluate the model's performance on the training data and print the result
error_score = metrics.r2_score(y_train, training_data_prediction)
print("R Squared Error: ", error_score)

# Create a scatter plot to visualize the relationship between actual prices and predicted prices
plt.scatter(y_train, training_data_prediction)
plt.xlabel("Actual Price")                     # Label for the x-axis
plt.ylabel("Predicted Price")                  # Label for the y-axis
plt.title("Actual Prices vs Predicted Prices") # Title of the plot
plt.show()                                     # Display the plot

# Make predictions on the test data using the fitted linear regression model
test_data_prediction = lin_reg_model.predict(X_test)

# Calculate the R-squared score to evaluate the model's performance on the training data and print the result
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R Squared Error: ", error_score)

# Create a scatter plot to visualize the relationship between actual prices and predicted prices
plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual Price")                     # Label for the x-axis
plt.ylabel("Predicted Price")                  # Label for the y-axis
plt.title("Actual Prices vs Predicted Prices") # Title of the plot
plt.show()                                     # Display the plot

"""####Lasso Regression"""

# Create a Lasso regression model and fit it to the training data
lass_reg_model = Lasso()
lass_reg_model.fit(X_train, y_train)

# Make predictions on the training data using the fitted linear regression model
training_data_prediction = lass_reg_model.predict(X_train)

# Calculate the R-squared score to evaluate the model's performance on the training data and print the result
error_score = metrics.r2_score(y_train, training_data_prediction)
print("R Squared Error: ", error_score)

# Create a scatter plot to visualize the relationship between actual prices and predicted prices
plt.scatter(y_train, training_data_prediction)
plt.xlabel("Actual Price")                     # Label for the x-axis
plt.ylabel("Predicted Price")                  # Label for the y-axis
plt.title("Actual Prices vs Predicted Prices") # Title of the plot
plt.show()                                     # Display the plot

# Make predictions on the test data using the fitted linear regression model
test_data_prediction = lass_reg_model.predict(X_test)

# Calculate the R-squared score to evaluate the model's performance on the training data and print the result
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R squared Error: ", error_score)

# Create a scatter plot to visualize the relationship between actual prices and predicted prices
plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual Price")                     # Label for the x-axis
plt.ylabel("Predicted Price")                  # Label for the y-axis
plt.title("Actual Prices vs Predicted Prices") # Title of the plot
plt.show()                                     # Display the plot